set nocompatible
filetype off

" set the runtime path to include Vundle and initialize
set rtp+=~/.vim/bundle/Vundle.vim
call vundle#begin()
	Plugin 'gmarik/Vundle.vim'
	Plugin 'airblade/vim-gitgutter'
	Plugin 'ludovicchabant/vim-gutentags'
	"Plugin 'rhysd/vim-clang-format'
	Plugin 'christoomey/vim-tmux-navigator'
	Plugin 'kien/ctrlp.vim'
	Plugin 'scrooloose/nerdcommenter'
	Plugin 'vim-airline/vim-airline'
	Plugin 'vim-airline/vim-airline-themes'

	Plugin 'Valloric/YouCompleteMe'

	Plugin 'google/vim-searchindex'

	Plugin 'SirVer/ultisnips'
	Plugin 'honza/vim-snippets'
call vundle#end()            " required

"=========================== Theme settings
set background=dark
colorscheme apprentice

"=========================== Vim behavior settings
if has ('autocmd')
	"=== Autoreload .vimrc on save, add file-type-based indentation
	augroup vimrc			" Replace vim configuration upon save
		autocmd! BufWritePost $MYVIMRC source % | echom "Reloaded " . $MYVIMRC | redraw
		autocmd! BufWritePost $MYGVIMRC if has('gui_running') | so % | echom "Reloaded " . $MYGVIMRC | endif | redraw
	augroup END

	augroup RestoreCursor	" Restore cursor position when opening files
		autocmd!
		autocmd BufReadPost * call setpos(".", getpos("'\""))|normal zz
	augroup END

	" Enable file type detection.
	" Use the default filetype settings, so that mail gets 'tw' set to 72, 'cindent' is on in C files, etc.
	" Also load indent files, to automatically do language-dependent indenting.
	filetype plugin indent on

	" Fix python indentation defaults, no respect
	autocmd Filetype python setlocal noexpandtab tabstop=4 shiftwidth=4 softtabstop=4
	autocmd WinEnter * set cursorline		" Highlight cursor line
	autocmd WinLeave * set nocursorline		" Highlight cursor line

endif


"=========================== Positional settings
set splitbelow		" Use bottom split for a new horizontal split buffer
set splitright		" Use right split for a new vertical split buffer

"=========================== General settings
set exrc			" Load working directory .vimrc file
set secure
set antialias		" Enable antialiasing on Mac OS X
set encoding=utf-8	" Default utf-8 encoding
set history=1024	" Increase command history
set clipboard=unnamed	" Allow us to use system clipboard"

set shortmess+=O	" file-read message overwrites previous
set shortmess+=o	" overwrite file-written messages

if exists('&belloff')
  set belloff=all	" never ring the bell for any reason
endif

if exists('$SUDO_USER')
	set nobackup                        " don't create root-owned files
	set nowritebackup                   " don't create root-owned files
	set backupdir=/tmp	" Location of the backup directory set dir=/tmp		" Location of the swap file
else
	set backupdir=~/local/.vim/tmp/backup
	set backupdir+=~/.vim/tmp/backup    " keep backup files out of the way
	set backupdir+=.
	set directory=~/local/.vim/tmp/swap//
	set directory+=~/.vim/tmp/swap/    " keep swap files out of the way
	set directory+=.
endif

" Disabling arrow keys (forming habbits!)
noremap <Up> <NOP>
noremap <Down> <NOP>
noremap <Left> <NOP>
noremap <Right> <NOP>
let mapleader = " "
nmap \ <Leader>

" Wildcard search ignore settings
set wildignore+=.git
set wildignore+=*~,*.swp,*.swo,*.tmp

"=========================== Editor formatting
set tabstop=4		" width of the TAB character
set softtabstop=4
set shiftwidth=4	" depth of single indentation level
set noexpandtab
set cindent			" enable advanced indentation tailored towards c-style languages
set cino+=g0		" indent public/private keywords after typing colon ':'

"=========================== Editor display
syntax on			" Enable syntax highlighting across the board
set relativenumber
set number
set hlsearch		" Highlight search results
set cursorline		" Highlight cursor line
set laststatus=2	" Show statusbar all the time
set scrolloff=1		" Scroll offset of 1 line
set showmatch		" Show matching bracket
set wildmenu		" Show advanced autocompletion in command mode
set nojoinspaces	" don't autoinsert two spaces after '.', '?', '!' for join command
set colorcolumn=80


"=========================== Fixes
"=== Fix the backspace key from getting stuck on one line
set backspace=indent,eol,start

"=== Allow color schemes to do bright colors without forcing bold.
if &t_Co == 8 && $TERM !~# '^linux\|^Eterm'
  set t_Co=16
endif

"=== Fix key bindings if running within tmux on mac
if &term =~ '^screen'
" tmux will send xterm-style keys when its xterm-keys option is on
	execute "set <xUp>=\e[1;*A"
	execute "set <xDown>=\e[1;*B"
	execute "set <xRight>=\e[1;*C"
	execute "set <xLeft>=\e[1;*D"
endif

if has('path_extra')
  setglobal tags-=./tags tags-=./tags; tags^=./tags;
endif


" UltiSnips triggering
let g:UltiSnipsExpandTrigger = '<C-l>'
let g:UltiSnipsJumpForwardTrigger = '<C-j>'
let g:UltiSnipsJumpBackwardTrigger = '<C-k>'

"=========================== Airline plugin customization
let g:airline_theme = "bubblegum"

"=== Enable the tabline extension which shows all buffers
let g:airline#extensions#tabline#enabled = 1
let g:airline#extensions#tabline#left_sep = ' '
let g:airline#extensions#tabline#left_alt_sep = '|'
let g:airline#extensions#tabline#buffer_nr_show = 1
let g:airline#extensions#tabline#buffer_nr_format = '| %s '
let g:airline#extensions#tabline#fnamemod = ':t'
let g:airline#extensions#tabline#show_splits = 0
let g:airline_symbols_ascii = 1

let g:airline_section_a = ''		" mode/crypt/paste/spell
let g:airline_section_b = ''		" branch
"let g:airline_section_c = '%t'		" bufferline or filename
let g:airline_section_x = ''		" tagbar/filetype/virtualenv
let g:airline_section_y = ''		" encoding/fileformat
let g:airline_section_z = '%l : %v' " line : column indicator
let g:airline_section_error   = ''	" errors notification
let g:airline_section_warning = ''	" warnings notification
let g:airline_powerline_fonts = 0	" disable powerline fonts

" Ensure the vertical bars match the airline colors in the horizontal highlights
hi VertSplit ctermbg=238 ctermfg=238

"=========================== Quickfix Toggle
function! GetBufferList()
	redir =>buflist | silent! ls!| redir END| return buflist
endfunction

function! ToggleList(bufname, pfx)
	let buflist = GetBufferList()
	for bufnum in map(filter(split(buflist, '\n'), 'v:val =~ "'.a:bufname.'"'), 'str2nr(matchstr(v:val, "\\d\\+"))')
		if bufwinnr(bufnum) != -1
			exec(a:pfx.'close')
			return
		endif
	endfor
	if a:pfx == 'l' && len(getloclist(0)) == 0
		echohl ErrorMsg
		echo "Location List is Empty."
		return
	endif
	let winnr = winnr()
	exec(a:pfx.'open')
	if winnr() != winnr
		wincmd p
	endif
endfunction

" Ensure quickfix remains open if there are linker errors in clang
setglobal errorformat^=%+Eclang:\ error:%.%#

"=========================== Tagging configuration
set tags=./tags,tags;		" Seach in current dir, current file's dir, or up dir until $HOME

"=========================== Keyboard Bindings - Normal Mode
"=== Split navigations
nnoremap <C-J> <C-W><C-J>
nnoremap <C-K> <C-W><C-K>
nnoremap <C-L> <C-W><C-L>
nnoremap <C-H> <C-W><C-H>

"=== Split resizing
nnoremap <Down> <C-w>-
nnoremap <Up> <C-w>+
nnoremap <Left> <C-w><
nnoremap <Right> <C-w>>

"=== Navigation bindings
nnoremap <silent> <Leader>q :bd\|bd #<CR>	" Destroy buffer
nnoremap <silent> <S-Tab> : bp<CR>	" Previous buffer
nnoremap <silent> <Tab> : bn<CR>	" Next buffer
nnoremap <silent> <Leader>d :bp\|bd #<CR>	" Destroy buffer

"=== Quickfix navigation
nnoremap <silent> <Leader>e :cn <CR>		" Open file/line for next error in quickfix window
nnoremap <silent> <Leader><S-e> :cp <CR>	" Open file/line for previous error in quickfix window

"=== Display toggles
"nnoremap <silent> <leader>l :call ToggleList("Location List", 'l')<CR>
nnoremap <silent> <leader>f :call ToggleList("Quickfix List", 'c')<CR>	" Toggle quickfix view
nnoremap <silent> <Leader><Leader> :nohlsearch<CR>						" Clear highlighting
nnoremap <silent> <Esc><Esc> :nohlsearch<CR>							" Clear highlighting
nnoremap <silent> <C-n>	   :let [&nu, &rnu] = [!&rnu, &nu+&rnu==1]<CR>	" Toggle line numbers
nnoremap <silent> <Leader>o :e.<CR>										" Open editor window

"=== Editor bindings
"nnoremap <space> za|					" Enable folding with the spacebar
nnoremap <silent> <Leader>w :w !diff % -<CR>|	" Show differences before writing to file


filetype plugin indent on
